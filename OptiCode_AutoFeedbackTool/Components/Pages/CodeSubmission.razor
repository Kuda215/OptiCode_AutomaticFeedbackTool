@page "/submitAssignment"

@using Newtonsoft.Json.Linq;
@using FastReport.Utils
@using FastReport.Preview
@using FastReport.Export.PdfSimple;
@inject IWebHostEnvironment env
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims
@using OptiCode_AutoFeedbackTool.Data
@inject ApplicationDbContext DbContext
@using Microsoft.EntityFrameworkCore
@using System.Drawing; 
@using System.IO
@using System
@using FastReport;
@using System.Diagnostics

@if (user != null)
{
    <div class="submission">
        <h2>Submit Your Assignment</h2>

        @if (!submitted)
        {
            <EditForm Model="@assignment" OnValidSubmit="HandleValidSubmit" id="formSubmit" FormName="CodeSubmission" >
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="file">Upload Your File</label>
                    <InputFile id="file" class="form-control" OnChange="HandleFileUpload_" />
                </div>

                <div class="form-group">
                    <label for="code">Paste Your Code</label>
                    <div id="code" class="form-control" style="height: 30vh; color: darkgray; width: 40vw;">
                        @assignment.Code
                    </div>
                    <div/>
                </div>
           
                <button type="submit"  class="btn btn-success">Submit Assignment</button>
            </EditForm>
        }

        @if (submitted)
        {
            <div class="results">
                <h5>Execution Result</h5>
                <pre>@output</pre>
            </div>
        }

        @if (!string.IsNullOrEmpty(ReportHtml))
        {
            <div class="modal" style="display:block;">
                <div class="modal-content">
                    <div class="modal-appbar">
                        <p class="close">
                            <span>
                                <p class="downloadtext" @onclick="CloseReportPreview">Download</p>
                            </span>
                            <span @onclick="CloseReportPreview">&times;</span>
                        </p>
                        <h3>Report Preview</h3>
                    </div>
                    <div class="reportViewer">
                        <iframe src="@ReportHtml" style="width: 100%; height: 100%;" frameborder="0"></iframe>
                    </div>
                </div>
            </div>
        }

        @if (loading == true)
        {
            <div class="progress-container">
                <div class="progress-bar" style="width:@progressPercentage">
                   Loading...(Step @progress of @totalSteps)
                </div>
            </div>
        }

    </div>
}
else
{
    <h3>User Not Authenticated.</h3>
}

@code {
    private bool submitted = false;
    private bool loading = false;
    private string output;
    private IBrowserFile uploadedFile;
    private Assignment assignment = new Assignment();
    Report theReport = new Report();
    private string ReportHtml;
    private int progress = 0;
    private int totalSteps = 8;
    public double progressPercentage = 0;
    private ApplicationUser user;
    [Microsoft.AspNetCore.Components.Parameter]
    public bool userAuth { get; set; } = false;
    public string? FormName { get; set; }
    public string Name  { get; set; }
    public string FullName  { get; set; }
    private IEnumerable<string> userRoles;
    private string ExecutionTime;
    private static double ExecutionTime_d;
    string progrmammingLanguage = "java";
    string memoryUsage = "";
    string AssRef = "";

    int numberOfLines = 0;
    int numberOfComments = 0;
    int numberOfExternalDependencies = 0;
    int numberOfFunctions = 0;

    double inputSize = 0;

    private async Task HandleFileUpload_(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;
        assignment.FileName = uploadedFile.Name;
    }


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User?.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

        if (userId != null)
        {
            userAuth = true;

            user = await DbContext.Users.FirstOrDefaultAsync(u => u.Id == userId);
            Name = user.FirstName;
            FullName = Name + " " + user.Surname + " " + user.StudentNumber;
        }
        else
        {
            userAuth = false;
        }
    }

    private void CloseReportPreview() => ReportHtml = null; // Hide the modal

    private async Task HandleValidSubmit()
    {
        loading = true;

        assignment.SubmissionDate = DateTime.Now;

        if (uploadedFile != null)
        {
            using (var stream = uploadedFile.OpenReadStream())
            {
                using (var reader = new StreamReader(stream))
                {
                    var code = await reader.ReadToEndAsync();
                    assignment.Code = code;
                    await SubmitCodeToPiston(assignment.Code, "java", "11");
                    return;
                }
            }
        }
        else if (!string.IsNullOrWhiteSpace(assignment.Code))
        {
            await SubmitCodeToPiston(assignment.Code, "java", "11");
            return;
        }

        submitted = true;
        output += "Unable to Read File.";
    }


    private async Task IncrementProgress() // Increment the progress value
    {
        if (progress < totalSteps)
        {
            progress++; 
        }

        await GetProgressBarWidth();
        StateHasChanged();
    }

    private async Task GetProgressBarWidth()
    {
        // Calculate the width in percentage based on the current progress
        double _progressPercentage = ((double)progress / totalSteps) * 60;
        progressPercentage = _progressPercentage;
    }

    private string ConvertExecutionTimeToString(Stopwatch stopWatch)
    {
        var elapsed = stopWatch.Elapsed;
        int hours = elapsed.Hours;
        int seconds = elapsed.Seconds + (elapsed.Minutes * 60) + (elapsed.Hours * 3600);

        ExecutionTime = hours > 0
            ? $"{hours} hrs {seconds % 3600} seconds"
            : $"{seconds} seconds";

        return ExecutionTime;
    }

    private int CountNumberOfLines(string SourceCode)
    {
        int num = 0;

        var lines = SourceCode.Split(new[] { "\r\n", "\r", "\n" }, StringSplitOptions.None);
        num = lines.Count(line => !string.IsNullOrWhiteSpace(line));

        return num;
    }

    private static string WrapJavaCodeWithMemoryTracking(string sourceCode)
    {
        // Find the indices of the second opening brace and the second-to-last closing brace
        int firstBraceIndex = sourceCode.IndexOf('{');
        int secondBraceIndex = sourceCode.IndexOf('{', firstBraceIndex + 1);
        int secondLastBraceIndex = sourceCode.LastIndexOf('}', sourceCode.LastIndexOf('}'));

        // Check if the indices are valid
        if (secondBraceIndex >= 0 && secondLastBraceIndex > secondBraceIndex)
        {
            // Extract the user code
            string userCode = sourceCode.Substring(secondBraceIndex + 1, secondLastBraceIndex - secondBraceIndex - 1).Trim();
            userCode = userCode.TrimEnd().TrimEnd('}');
            // Create the wrapped code
            string wrappedCode = @"
            public class Main {
                public static void main(String[] args) {
                    long startTime = System.currentTimeMillis();
                    Runtime runtime = Runtime.getRuntime();
                    runtime.gc(); // Run garbage collector
                    long usedMemoryBefore = runtime.totalMemory() - runtime.freeMemory();

                    try {
                        // User's code begins here
        " + userCode + @"
                        // User's code ends here

                        // Capture memory usage and execution time
                        long usedMemoryAfter = runtime.totalMemory() - runtime.freeMemory();
                        long executionTime = System.currentTimeMillis() - startTime;
                        long memoryUsed = usedMemoryAfter - usedMemoryBefore;

                        System.out.println(""Memory used: "" + memoryUsed + "" bytes"");
                        System.out.println(""Execution time: "" + executionTime + "" ms"");
                    } catch (Exception e) {
                        System.out.println(""Error during execution: "" + e.getMessage());
                    }
                }
            }
        ";

            return wrappedCode;
        }

        // If the braces aren't valid, return the original source code
        return sourceCode;
    }

    //sourceCode = sourceCode.Replace("\n", " ").Replace("\r", " ");

    // Declare global variables
    private static long memoryUsed;

    private static bool ExecuteAndMeasureJavaCode(string sourceCode)
    {
        // Generate a temporary Java file
        string tempJavaFilePath = Path.Combine(Path.GetTempPath(), "Main.java");
        File.WriteAllText(tempJavaFilePath, sourceCode);

        try
        {
            // Step 1: Compile Java file
            using (Process javac = new Process())
            {
                javac.StartInfo.FileName = "javac";
                javac.StartInfo.Arguments = tempJavaFilePath;
                javac.StartInfo.RedirectStandardOutput = true;
                javac.StartInfo.RedirectStandardError = true;
                javac.StartInfo.UseShellExecute = false;
                javac.StartInfo.CreateNoWindow = true;
                javac.StartInfo.StandardErrorEncoding = System.Text.Encoding.UTF8;
                javac.StartInfo.StandardOutputEncoding = System.Text.Encoding.UTF8;

                javac.Start();

                string compileOutput = javac.StandardOutput.ReadToEnd();
                string compileError = javac.StandardError.ReadToEnd();
                javac.WaitForExit();

                if (javac.ExitCode != 0)
                {
                    Console.WriteLine("Java compilation error:");
                    Console.WriteLine(compileError);
                    return false;
                }
            }

            // Step 2: Execute the compiled Java class
            string tempClassFilePath = Path.Combine(Path.GetTempPath(), "Main");

            // Measure execution time and memory
            GC.Collect(); // Run garbage collector
            GC.WaitForPendingFinalizers(); // Wait for finalizers to complete
            long usedMemoryBefore = GC.GetTotalMemory(true); // Measure memory before execution

            long startTime = DateTime.Now.Ticks; // Measure time using Ticks

            using (Process javaProcess = new Process())
            {
                javaProcess.StartInfo.FileName = "java";
                javaProcess.StartInfo.Arguments = "-cp " + Path.GetTempPath() + " Main"; // Class name without .class
                javaProcess.StartInfo.RedirectStandardOutput = true;
                javaProcess.StartInfo.RedirectStandardError = true;
                javaProcess.StartInfo.UseShellExecute = false;
                javaProcess.StartInfo.CreateNoWindow = true;

                javaProcess.Start();

                string output = javaProcess.StandardOutput.ReadToEnd();
                string error = javaProcess.StandardError.ReadToEnd();
                javaProcess.WaitForExit();

                long endTime = DateTime.Now.Ticks; 

                long usedMemoryAfter = GC.GetTotalMemory(true);

                // Calculate execution time and memory used
                ExecutionTime_d = (endTime - startTime) / TimeSpan.TicksPerMillisecond;
                memoryUsed = usedMemoryAfter - usedMemoryBefore; 

                Console.WriteLine(output);
                if (javaProcess.ExitCode != 0)
                {
                    Console.WriteLine("Java execution error:");
                    Console.WriteLine(error);
                    return false;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("An error occurred during Java execution:");
            Console.WriteLine(ex.Message);
            return false;
        }
        finally
        {
            // Cleanup
            if (File.Exists(tempJavaFilePath)) File.Delete(tempJavaFilePath);
            string tempClassFilePath = Path.Combine(Path.GetTempPath(), "Main.class");
            if (File.Exists(tempClassFilePath)) File.Delete(tempClassFilePath);
        }

        return true;
    }

    public static CodeAnalysisResult AnalyzeDuplicacy(string src)
    {
        string[] linesOfCode = src.Split(new[] { "\r\n" }, StringSplitOptions.None);
        var snippetOccurrences = new Dictionary<string, int>();
        var suggestions = new List<string>();

        for (int i = 0; i < linesOfCode.Length; i++)
        {
            string trimmedLine = linesOfCode[i].Trim();

            if (string.IsNullOrEmpty(trimmedLine))
                continue;

            if (snippetOccurrences.ContainsKey(trimmedLine))
            {
                snippetOccurrences[trimmedLine]++;
            }
            else
            {
                snippetOccurrences[trimmedLine] = 1;
            }
        }

        // Prepare the result arrays
        var codeSnippets = new List<string>();
        var occurrences = new List<int>();
        var textSuggestions = new List<string>();

        foreach (var kvp in snippetOccurrences)
        {
            codeSnippets.Add(kvp.Key);
            occurrences.Add(kvp.Value);
            textSuggestions.Add($"Consider refactoring line: {kvp.Key}");
        }

        return new CodeAnalysisResult
            {
                CodeSnippets = codeSnippets.ToArray(),
                Occurrences = occurrences.ToArray(),
                TextSuggestions = textSuggestions.ToArray()
            };
    }

    public static int CalculateCyclomaticComplexity(string code)
    {
        string[] controlFlowKeywords = { "if", "for", "while", "case", "catch", "else", "switch" };

        string[] lines = code.Split(new[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);
        int decisionPointCount = 0;

        foreach (var line in lines)
        {
            if (controlFlowKeywords.Any(keyword => line.Contains(keyword, StringComparison.OrdinalIgnoreCase)))
            {
                decisionPointCount++;
            }
        }

        int cyclomaticComplexity = decisionPointCount + 1;
        return cyclomaticComplexity;
    }

    private int LevenshteinDistance(string str1, string str2)
    {
        int len1 = str1.Length;
        int len2 = str2.Length;
        int[,] distance = new int[len1 + 1, len2 + 1];

        for (int i = 0; i <= len1; distance[i, 0] = i++) ;
        for (int j = 0; j <= len2; distance[0, j] = j++) ;

        for (int i = 1; i <= len1; i++)
        {
            for (int j = 1; j <= len2; j++)
            {
                int cost = (str1[i - 1] == str2[j - 1]) ? 0 : 1;
                distance[i, j] = Math.Min(Math.Min(distance[i - 1, j] + 1, distance[i, j - 1] + 1), distance[i - 1, j - 1] + cost);
            }
        }

        return distance[len1, len2];
    }

    public List<string> DetectDuplicatedCode(string sourceCode, int threshold = 10)
    {
        List<string> duplicates = new List<string>();
        string[] lines = sourceCode.Split(new[] { Environment.NewLine }, StringSplitOptions.None);

        var codeBlocks = new List<string>();
        string currentBlock = string.Empty;
        foreach (var line in lines)
        {
            if (line.Trim().StartsWith("public") || line.Trim().StartsWith("private") || line.Trim().StartsWith("void"))
            {
                if (!string.IsNullOrEmpty(currentBlock))
                {
                    codeBlocks.Add(currentBlock);
                    currentBlock = string.Empty;
                }
            }
            currentBlock += line + Environment.NewLine;
        }

        for (int i = 0; i < codeBlocks.Count; i++)
        {
            for (int j = i + 1; j < codeBlocks.Count; j++)
            {
                int distance = LevenshteinDistance(codeBlocks[i], codeBlocks[j]);
                if (distance < threshold) 
                {
                    duplicates.Add($"Duplicate found between block {i + 1} and block {j + 1}");
                }
            }
        }

        return duplicates;
    }

    private async Task SubmitCodeToPiston(string sourceCode, string language, string version)
    {

        try
        {
            loading = true;

            //=========================== Code Execution =================================//
            numberOfLines = CountNumberOfLines(sourceCode);
            string wrappedJavaCode = WrapJavaCodeWithMemoryTracking(sourceCode);
            await IncrementProgress(); //1/8

            bool isError = ExecuteAndMeasureJavaCode(wrappedJavaCode);
            int complexity = CalculateCyclomaticComplexity(sourceCode);
            var duplicates = DetectDuplicatedCode(sourceCode); 

            if (isError == true)
            {
                CodeAnalysisTool codeAnalysisTool = new CodeAnalysisTool();

                //=========================== Summary Analysis =================================//

                //string reportContent_Summary = await codeAnalysisTool.GetSummary(sourceCode, "java") ?? "";
                await IncrementProgress(); //2

                // var jsonObject_summary = JObject.Parse(reportContent_Summary);
                // var content_summary = jsonObject_summary.ToString();
                // var analysis_summary = new JObject();
                // analysis_summary = JObject.Parse(content_summary);

                // if (analysis_summary != null)
                // {
                //     var summary = analysis_summary["summary"] !=null ? analysis_summary["summary"] : (analysis_summary["overall"] != null ? analysis_summary : "");

                //     var overallScore = summary["overall"]["score"].ToString();

                //     var duplicateCode = ExtractCriterion(summary["duplicate_code"]);
                //     var complexity = ExtractCriterion(summary["overall_complexity"]);
                //     var codeReadability = ExtractCriterion(summary["code_readibility"]);
                //     var code_structure = ExtractCriterion(summary["code_structure"]);
                //     var maintainability = ExtractCriterion(summary["maintainability"]);
                //     var data_structure_choice = ExtractCriterion(summary["data_structure_choice"]);
                //     var commentCoverage = ExtractCriterion(summary["comment_coverage"]);
                //     var error_handling = ExtractCriterion(summary["error_handling"]);
                //     var adherenceToCodingStandards = ExtractCriterion(summary["adherence_to_coding_standards"]);
                // }

                AnalyzeDuplicacy(sourceCode);

                await IncrementProgress(); //3

                //=========================== Graph Analysis =================================//
                string reportContent_Graphs = await codeAnalysisTool.GetGraphs(sourceCode, "java") ?? "";

                var jsonObject_Graphs = JObject.Parse(reportContent_Graphs);
                var content_Graphs = jsonObject_Graphs.ToString();
                var analysis_Graphs = new JObject();
                analysis_Graphs = JObject.Parse(content_Graphs);
                await IncrementProgress(); //4

                if (analysis_Graphs != null)
                {
                    var summary = analysis_Graphs["graphs"];
                    var graph1 = summary["graph1"];
                    var graph2 = summary["graph2"];
                    var graph3 = summary["graph3"];
                    var graph4 = summary["graph4"];
                    var graph5 = summary["graph5"];

                    GraphData graphs = new GraphData();

                    graphs.ProgressOverTime_graph =
                        new Graph(
                            graph1["type"].ToString(), graph1["title"].ToString(), graph1["y-title"].ToString(), 
                            graph1["x-title"].ToString(), graph1["y-axis"].Select(value => Convert.ToDouble(value)).ToList(),
                            graph1["y-axis"].Select(value => Convert.ToString(value)).ToList(), graph1["bottom_text"].ToString(),
                            graph1["data-point-labels"].Select(value => Convert.ToString(value)).ToList()
                       );

                    graphs.CommonIssuesFreq_graph =
                        new Graph(
                            graph2["type"].ToString(), graph2["title"].ToString(), graph2["y-title"].ToString(), 
                            graph2["x-title"].ToString(), graph2["y-axis"].Select(value => Convert.ToDouble(value)).ToList(),
                            graph2["y-axis"].Select(value => Convert.ToString(value)).ToList(), graph2["bottom_text"].ToString(),
                            graph2["data-point-labels"].Select(value => Convert.ToString(value)).ToList()
                       );

                    graphs.TimeComplexityAnalysis_graph =
                        new Graph(
                            graph3["type"].ToString(), graph3["title"].ToString(), graph3["y-title"].ToString(), 
                            graph3["x-title"].ToString(), graph3["y-axis"].Select(value => Convert.ToDouble(value)).ToList(),
                            graph3["y-axis"].Select(value => Convert.ToString(value)).ToList(), graph3["bottom_text"].ToString(),
                            graph3["data-point-labels"].Select(value => Convert.ToString(value)).ToList()
                       );

                    graphs.LearningCurve_graph =
                        new Graph(
                            graph4["type"].ToString(), graph4["title"].ToString(), graph4["y-title"].ToString(), 
                            graph4["x-title"].ToString(), graph4["y-axis"].Select(value => Convert.ToDouble(value)).ToList(),
                            graph4["y-axis"].Select(value => Convert.ToString(value)).ToList(), graph4["bottom_text"].ToString(),
                            graph4["data-point-labels"].Select(value => Convert.ToString(value)).ToList()
                       ); 

                    graphs.FutureUsageAnalysis_graph =
                        new Graph(
                            graph5["type"].ToString(), graph5["title"].ToString(), graph5["y-title"].ToString(), 
                            graph5["x-title"].ToString(), graph5["y-axis"].Select(value => Convert.ToDouble(value)).ToList(),
                            graph5["y-axis"].Select(value => Convert.ToString(value)).ToList(), graph5["bottom_text"].ToString(),
                            graph5["data-point-labels"].Select(value => Convert.ToString(value)).ToList()
                       );
                }
                await IncrementProgress(); //5

                //=========================== Sources Analysis =================================//
                string reportContent_Sources = await codeAnalysisTool.GetSources(sourceCode, "java") ?? "";
                await IncrementProgress(); //6

                var jsonObject_Sources = JObject.Parse(reportContent_Sources);
                var content_Sources = jsonObject_Sources.ToString();
                var analysis_Sources = new JObject();
                analysis_Sources = JObject.Parse(content_Sources);

                if (analysis_Sources != null)
                {
                    var summary = analysis_Sources["sites"];
                    var site1 = summary["site1"];
                    var site2 = summary["site2"];
                    var site3 = summary["site3"];

                    Site siteObj = new Site();
                    if (site1 != null)
                    {
                        siteObj.Name = site1["name"].ToString();
                        siteObj.Url = site1["url"].ToString();
                        siteObj.KeyFindings = site1["Key Findings"].ToString();
                    }

                    Site siteObj2 = new Site();
                    if (site2 != null)
                    {
                        siteObj2.Name = site2["name"].ToString();
                        siteObj2.Url = site2["url"].ToString();
                        siteObj2.KeyFindings = site2["Key Findings"].ToString();
                    }

                    Site siteObj3 = new Site();
                    if(site3 != null)
                    {
                        siteObj3.Name = site3["name"].ToString();
                        siteObj3.Url = site3["url"].ToString();
                        siteObj3.KeyFindings = site3["Key Findings"].ToString();
                    }
                }
                await IncrementProgress(); //7
                string path = "C:\\NewestSource\\OptiCode_AutomaticFeedbackTool\\OptiCode_AutoFeedbackTool\\Components\\Reports\\FeedBackTool_Report.frx";

                theReport.Load(path);

                theReport.SetParameterValue("FirstName", Name);
                theReport.SetParameterValue("FullName", FullName);

                await IncrementProgress(); //8
                loading = false;

                var pictureObject = theReport.FindObject("picFront") as PictureObject;

                if (pictureObject != null)
                {
                    string imagePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "img", "frontGraph.png");
                    pictureObject.Image = Image.FromFile(imagePath);
                }

                theReport.Prepare();

                var pdfExport = new PDFSimpleExport();
                string pdfFilePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "reports", "Report.pdf"); // Ensure this directory exists
                theReport.Export(pdfExport, pdfFilePath);

                ReportHtml = $"/reports/Report.pdf";
            }
            else
            {
                output = "Code Excecution Failed. \r\n";
                loading = false;

            }
        }
        catch (Exception ex)
        {

            output = $"Error: {ex.Message}";
            loading = false;

        }

    }

    public class CodeAnalysis
    {
        public string OverallScore { get; set; }
        public Criterion DuplicateCode { get; set; }
        public Criterion Complexity { get; set; }
        public Criterion CodeReadability { get; set; }
        public Criterion Efficiency { get; set; }
        public Criterion Maintainability { get; set; }
        public Criterion CommentCoverage { get; set; }
        public Criterion AdherenceToCodingStandards { get; set; }
        public Criterion Performance { get; set; }
    }

    public class Criterion
    {
        public string Score { get; set; }
        public string Justification { get; set; }
        public List<Instance> Instances { get; set; }
    }

    public class Instance
    {
        public string Code { get; set; }
        public string InsteadOf { get; set; }
    }

    private static Criterion ExtractCriterion(JToken criterion)
    {
        if (criterion != null)
        {
            return new Criterion
                {
                    Score = criterion["score"] != null ? criterion["score"].ToString() : "",
                    Justification = criterion["justification"] != null ? criterion["justification"].ToString() : "",
                    Instances = criterion["instances"] != null
                            ? criterion["instances"].ToObject<List<Instance>>()
                            : new List<Instance>() // Initialize to an empty list if it doesn't exist
                };
        }
        else
        {
            return new Criterion
                {
                    Score = "",
                    Justification = "",
                    Instances =  new List<Instance>()
                };
        }
    }

    public class GraphData
    {
        public Graph ProgressOverTime_graph { get; set; }
        public Graph CommonIssuesFreq_graph { get; set; }
        public Graph TimeComplexityAnalysis_graph { get; set; }
        public Graph LearningCurve_graph { get; set; }
        public Graph FutureUsageAnalysis_graph { get; set; }
    }

    public class Graph
    {
        public string Type { get; set; }           // Type of the graph (e.g., "line-graph", "bar-graph", etc.)
        public string Title { get; set; }          // Title of the graph
        public string YTitle { get; set; }         // Y-axis title
        public string XTitle { get; set; }         // X-axis title
        public List<double> YAxis { get; set; }    // Values for the Y-axis
        public List<string> XAxis { get; set; }    // Labels for the X-axis
        public string BottomText { get; set; }     // Additional text for the bottom of the graph
        public List<string> DataPointLabels { get; set; }    // Labels for the X-axis

        public Graph(string type, string title, string yTitle, string xTitle, List<double> yAxis, List<string> xAxis, string bottomText, List<string> dataPointLabels)
        {
            Type = type;
            Title = title;
            YTitle = yTitle;
            XTitle = xTitle;
            YAxis = yAxis;
            XAxis = xAxis;
            BottomText = bottomText;
            DataPointLabels = dataPointLabels;
        }
    }

    public class Site
    {
        public string Url { get; set; }
        public string Name { get; set; }
        public string KeyFindings { get; set; }
    }
    public class CodeAnalysisResult
    {
        public string[] CodeSnippets { get; set; }
        public int[] Occurrences { get; set; }
        public string[] TextSuggestions { get; set; }
    }


}
